core_expertise:
  - "Nix: Package management and reproducible environments."
  - "home-manager: Declarative user environment management."
  - "macOS: Development and system configurations."
  - "Linux: System administration and CLI tooling."
  - "Windows: Cross-platform compatibility and WSL integration."
  - "WSL: Windows Subsystem for Linux development and automation."
  - "Nix: Managing reproducible builds, system configurations, and package management."
  - "Go Development: Strong adherence to Go best practices, structured package design, and effective error handling."
  - "Configuration Management: Managing YAML-based configurations with validation and merging strategies."
  - "Reproducible Environments: Leveraging Nix for cross-platform consistency."
  - "CLI Tooling: Providing robust, user-friendly command-line interfaces."
  - "Testing & Code Quality: Emphasizing table-driven tests, static analysis, and automated validation."
  - "Documentation-Driven Development: Ensuring comprehensive and structured documentation."

repository_structure:
  always:
    - "Maintain a well-organized repository with clear separation between commands (cmd/), libraries (pkg/), and documentation (docs/)."
    - "Include essential root files: .golangci.yml, .pre-commit-config.yaml, commitlint.config.js, LICENSE."
    - "Require key directories: cmd/, pkg/, internal/, docs/, test/, .github/"
  never:
    - "Place business logic inside cmd/. Only CLI orchestration should exist there."
    - "Omit documentation files essential for onboarding and contribution."

code_conventions:
  always:
    - "Follow a clear package structure: cmd/ for CLI entry points, pkg/config for configuration handling, pkg/nix for Nix interactions, pkg/platform for OS-specific logic, pkg/progress for UX improvements."
    - "Use CamelCase for interfaces."
    - "Use configManager for configuration management variables."
    - "Use err consistently for error variables."
    - "Use fmt.Errorf('failed to %s: %w', action, err) for error wrapping."
  never:
    - "Define ad-hoc types for errors; use structured error types (type {name}Error struct { Err error })."
    - "Skip error wrapping in return statements."

documentation_conventions:
  always:
    - "Include key markdown files: README.md, CONTRIBUTING.md, CONFIG.md, CONFIG-REFERENCE.md, GETTING-STARTED.md, BEST-PRACTICES.md."
    - "Follow these markdown rules:"
    - "Use ATX-style headers (# Header)."
    - "Ensure code blocks specify a language."
    - "Use - for unordered lists."
  never:
    - "Use inconsistent header styles or mixed list formats."
    - "Leave code examples without a language hint."

configuration_file_standards:
  always:
    - "Ensure configurations are as general as possible, minimizing boilerplate while maximizing flexibility."
    - "Support future versions of Nix, home-manager, and their evolving syntax."
    - "Leverage declarative and modular approaches for extensibility."
    - "Validate against current best practices to ensure longevity."
    - "Enforce required fields in YAML configurations: version, shell, editor."
    - "Validate shell_config:"
    - "  Required: type"
    - "  Optional: plugins, aliases"
    - "Validate editor_config:"
    - "  Required: type"
    - "  Optional: extensions"
  never:
    - "Allow incomplete configurations without default values."
    - "Merge conflicting team and personal configurations without validation."

testing_validation:
  always:
    - "Use _test.go suffix for test files."
    - "Prefix test functions with Test."
    - "Require table-driven tests."
    - "Categorize validation tests by: config, shell, editor."
    - "Use Test{Component}_{Scenario} naming convention."
  never:
    - "Skip edge cases."
    - "Omit fixture-based testing for configuration validation."

commit_message_standards:
  always:
    - "Follow Conventional Commits:"
    - "  feat: New features."
    - "  fix: Bug fixes."
    - "  docs: Documentation changes."
    - "  style: Code style changes (no functional impact)."
    - "  refactor: Code restructuring (no behavior change)."
    - "  perf: Performance improvements."
    - "  test: Testing improvements."
    - "  chore: Maintenance tasks."
    - "  ci: CI/CD changes."
    - "Use <type>[optional scope]: <description> format."
    - "Mark breaking changes with ! or BREAKING CHANGE:."
  never:
    - "Use vague commit messages (fix bug or update)."
    - "Ignore structured commit formatting."

linting_code_formatting:
  always:
    - "Use golangci-lint with the following linters:"
    - "  gofmt"
    - "  govet"
    - "  errcheck"
    - "  staticcheck"
    - "  gosimple"
    - "  ineffassign"
    - "  unused"
    - "  typecheck"
    - "  bodyclose"
    - "  revive"
    - "Enable:"
    - "  Shadow checking (shadow: error)."
    - "  Exported function documentation enforcement (exported: true)."
  never:
    - "Push code with unformatted go fmt violations."
    - "Allow unhandled errors or unchecked return values."

version_control:
  always:
    - "Ignore unnecessary files:"
    - "  *.exe"
    - "  *.test"
    - "  *.out"
    - "  .env"
    - "  .DS_Store"
    - "  dist/"
    - "  bin/"
    - "  coverage.txt"
    - "  tmp/"
    - "Enforce clean, structured commits."
  never:
    - "Push sensitive files."
    - "Commit generated build artifacts."

development_philosophy:
  - "Reproducibility First: Ensure all environments are predictable across Linux, macOS, and WSL."
  - "Error Handling Matters: Never ignore an errorâ€”wrap it and provide context."
  - "User Experience is Critical: Provide meaningful feedback, avoid silent failures."
  - "Convention over Configuration: Defaults should be sensible; customization should be optional."
  - "Automation Wins: Automate linting, validation, and testing as much as possible."
  - "Documentation is Non-Negotiable: Every feature must be properly documented."

best_practices:
  do:
    - "Enforce schema validation before applying configurations."
    - "Ensure cross-platform compatibility for all package installations."
    - "Handle user experience by providing progress indicators and clear error messages."
    - "Maintain security best practices:"
    - "  Proper file permission handling."
    - "  Careful configuration path management."
  do_not:
    - "Allow platform-specific assumptions to bleed into cross-platform logic."
    - "Let errors propagate without meaningful context."
    - "Skip essential testing in CI/CD."
    - "Assume default configurations without explicit validation."
