name: Release Beta
on:
    pull_request:
        types: [opened, edited, reopened, synchronize]

# Add permissions block
permissions:
    contents: write
    pull-requests: write

jobs:
    check_release:
        uses: ./.github/workflows/check_release_flag.yml
        with:
            pull_request_number: ${{ github.event.pull_request.number }}

    build:
        needs: check_release
        if: needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true
            - name: Build
              run: go build -v ./...

    version_and_publish:
        needs: [check_release, build]
        if: |
            github.event.pull_request.draft == false &&
            needs.check_release.outputs.should_publish == 'true' &&
            needs.build.result == 'success'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: ${{ github.event.pull_request.head.sha }}
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true
            - name: Configure Git
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global --add safe.directory "*"
            - name: Version and Publish Beta
              id: version
              run: |
                  set -e
                  # Get current version from go.mod
                  CURRENT_VERSION=$(grep -m1 "^module" go.mod | awk '{print $2}' | awk -F/ '{print $NF}' | sed 's/v//')
                  echo "Current version: ${CURRENT_VERSION}"

                  # Get all commits in the PR
                  git fetch origin main
                  git checkout ${{ github.event.pull_request.head.sha }}
                  PR_COMMITS=$(git log --no-merges --format=%B origin/main..HEAD)
                  echo "PR commits:"
                  echo "$PR_COMMITS"

                  # Determine release type from PR commits
                  RELEASE_TYPE=""
                  while IFS= read -r COMMIT_MSG; do
                    if [[ -z "$COMMIT_MSG" ]]; then
                      continue
                    fi

                    if [[ "$COMMIT_MSG" =~ ^feat!: || "$COMMIT_MSG" =~ ^fix!: || "$COMMIT_MSG" =~ "BREAKING CHANGE:" ]]; then
                      RELEASE_TYPE="major"
                      break
                    elif [[ -z "$RELEASE_TYPE" && "$COMMIT_MSG" =~ ^feat: ]]; then
                      RELEASE_TYPE="minor"
                    elif [[ -z "$RELEASE_TYPE" && "$COMMIT_MSG" =~ ^(fix|perf|refactor|build|deps|go): ]]; then
                      RELEASE_TYPE="patch"
                    fi
                  done <<< "$PR_COMMITS"

                  if [[ -z "$RELEASE_TYPE" ]]; then
                    echo "No release type found in PR commits"
                    exit 0
                  fi

                  echo "Release type: ${RELEASE_TYPE}"

                  # Get latest release from main
                  LATEST_MAIN_VERSION=$(git describe --tags --match "v*" --abbrev=0 origin/main 2>/dev/null || echo "v0.0.0")
                  LATEST_MAIN_VERSION=${LATEST_MAIN_VERSION#v}
                  echo "Latest main version: ${LATEST_MAIN_VERSION}"

                  # Calculate new base version using go version comparison
                  case "$RELEASE_TYPE" in
                    "major")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      BASE_VERSION="$((MAJOR + 1)).0.0"
                      ;;
                    "minor")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f2)
                      BASE_VERSION="${MAJOR}.$((MINOR + 1)).0"
                      ;;
                    "patch")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f2)
                      PATCH=$(echo $LATEST_MAIN_VERSION | cut -d. -f3)
                      BASE_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                      ;;
                    *)
                      echo "Error: Invalid release type"
                      exit 1
                      ;;
                  esac

                  echo "Base version: ${BASE_VERSION}"

                  # Get latest beta for this base version
                  LATEST_BETA=$(git tag -l "v${BASE_VERSION}-beta*" --sort=-v:refname | head -n1)
                  if [[ -z "$LATEST_BETA" ]]; then
                    BETA_VERSION="${BASE_VERSION}-beta.1"
                  else
                    CURRENT_BETA_NUMBER=$(echo "$LATEST_BETA" | sed -E 's/.*beta\.([0-9]+)/\1/')
                    NEXT_BETA_NUMBER=$((CURRENT_BETA_NUMBER + 1))
                    BETA_VERSION="${BASE_VERSION}-beta.${NEXT_BETA_NUMBER}"
                  fi
                  echo "Beta version: ${BETA_VERSION}"

                  # Generate changelog for PR
                  {
                    echo "## Changes in this Beta Release"
                    echo

                    # Group commits by type
                    BREAKING_CHANGES=$(echo "$PR_COMMITS" | grep -E "^feat!:|^fix!:|BREAKING CHANGE:" || true)
                    if [ ! -z "$BREAKING_CHANGES" ]; then
                      echo "### Breaking Changes"
                      echo "$BREAKING_CHANGES"
                      echo
                    fi

                    FEATURES=$(echo "$PR_COMMITS" | grep "^feat:" || true)
                    if [ ! -z "$FEATURES" ]; then
                      echo "### Features"
                      echo "$FEATURES"
                      echo
                    fi

                    FIXES=$(echo "$PR_COMMITS" | grep "^fix:" || true)
                    if [ ! -z "$FIXES" ]; then
                      echo "### Bug Fixes"
                      echo "$FIXES"
                      echo
                    fi

                    PERF=$(echo "$PR_COMMITS" | grep "^perf:" || true)
                    if [ ! -z "$PERF" ]; then
                      echo "### Performance Improvements"
                      echo "$PERF"
                      echo
                    fi

                    OTHER=$(echo "$PR_COMMITS" | grep -vE "^(feat!:|fix!:|feat:|fix:|perf:|BREAKING CHANGE:)" || true)
                    if [ ! -z "$OTHER" ]; then
                      echo "### Other Changes"
                      echo "$OTHER"
                      echo
                    fi
                  } > temp_changelog.txt

                  # Build and test with new version
                  go build -v ./...
                  go test -v ./...

                  # Create tag without committing (since we're in detached HEAD)
                  git tag -a "v${BETA_VERSION}" -m "Release version ${BETA_VERSION}"

                  # Set outputs for use in subsequent steps
                  echo "beta_version=${BETA_VERSION}" >> $GITHUB_OUTPUT

            - name: Push tag
              if: steps.version.outputs.beta_version != ''
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
                  git push origin "v${{ steps.version.outputs.beta_version }}"

            - name: Build Release Binaries
              if: steps.version.outputs.beta_version != ''
              run: |
                  VERSION="${{ steps.version.outputs.beta_version }}"
                  mkdir -p dist

                  # Build for macOS (Intel)
                  GOOS=darwin GOARCH=amd64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_darwin_amd64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for macOS (Apple Silicon)
                  GOOS=darwin GOARCH=arm64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_darwin_arm64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for Linux (x86_64)
                  GOOS=linux GOARCH=amd64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_linux_amd64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for Linux (ARM64)
                  GOOS=linux GOARCH=arm64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_linux_arm64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

            - name: Create GitHub Release
              if: steps.version.outputs.beta_version != ''
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  VERSION="${{ steps.version.outputs.beta_version }}"
                  CHANGELOG=$(cat temp_changelog.txt)

                  # Create release with changelog
                  gh release create "v${VERSION}" \
                    --prerelease \
                    --title "v${VERSION}" \
                    --notes "${CHANGELOG}" \
                    dist/nix-foundry_${VERSION}_*.tar.gz

            - name: Comment on PR
              if: steps.version.outputs.beta_version != ''
              uses: actions/github-script@v7
              with:
                  script: |
                    const fs = require('fs');
                    const betaVersion = '${{ steps.version.outputs.beta_version }}';
                    const changelog = fs.readFileSync('temp_changelog.txt', 'utf8');

                    const body = `🚀 Beta Release Published!

                    Version: \`${betaVersion}\`

                    To test this beta version:

                    1. Download the binary for your platform:
                    \`\`\`bash
                    # For macOS (Intel)
                    curl -L https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/v${betaVersion}/nix-foundry_${betaVersion}_darwin_amd64.tar.gz -o nix-foundry-beta.tar.gz

                    # For macOS (Apple Silicon)
                    curl -L https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/v${betaVersion}/nix-foundry_${betaVersion}_darwin_arm64.tar.gz -o nix-foundry-beta.tar.gz

                    # For Linux (x86_64)
                    curl -L https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/v${betaVersion}/nix-foundry_${betaVersion}_linux_amd64.tar.gz -o nix-foundry-beta.tar.gz

                    # For Linux (ARM64)
                    curl -L https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/v${betaVersion}/nix-foundry_${betaVersion}_linux_arm64.tar.gz -o nix-foundry-beta.tar.gz
                    \`\`\`

                    2. Extract and install locally:
                    \`\`\`bash
                    mkdir -p nix-foundry-beta && tar xzf nix-foundry-beta.tar.gz -C nix-foundry-beta
                    cd nix-foundry-beta
                    # Rename to avoid conflicts with stable version
                    mv nix-foundry nix-foundry-beta
                    # Add current directory to PATH for testing
                    export PATH=$PWD:$PATH
                    \`\`\`

                    3. Verify the installation:
                    \`\`\`bash
                    nix-foundry-beta --help
                    \`\`\`

                    ${changelog}`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body: body
                    });
