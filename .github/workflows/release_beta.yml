name: Release Beta
on:
    pull_request:
        types: [opened, edited, reopened, synchronize]

jobs:
    check_release:
        uses: ./.github/workflows/check_release_flag.yml
        with:
            pull_request_number: ${{ github.event.pull_request.number }}

    build:
        needs: check_release
        if: needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true

    version_and_publish:
        needs: [check_release, build]
        if: |
            github.event.pull_request.draft == false &&
            needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true
            - name: Configure Git
              run: |
                  git config --global user.name "Github Actions"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
            - name: Version and Publish Beta
              id: version
              run: |
                  set -e
                  # Get current version from go.mod
                  CURRENT_VERSION=$(grep -m1 "^module" go.mod | awk '{print $2}' | awk -F/ '{print $NF}' | sed 's/v//')
                  echo "Current version: ${CURRENT_VERSION}"

                  # Get the latest commit message
                  COMMIT_MSG=$(git log -1 --pretty=format:%s)
                  echo "Latest commit: ${COMMIT_MSG}"

                  # Determine release type from commit message
                  if [[ $COMMIT_MSG =~ ^feat!: || $COMMIT_MSG =~ ^fix!: || $COMMIT_MSG =~ "BREAKING CHANGE:" ]]; then
                    RELEASE_TYPE="major"
                  elif [[ $COMMIT_MSG =~ ^feat: ]]; then
                    RELEASE_TYPE="minor"
                  elif [[ $COMMIT_MSG =~ ^(fix|perf|refactor|build|deps|go): ]]; then
                    RELEASE_TYPE="patch"
                  else
                    echo "No release type found in commit message"
                    exit 0
                  fi

                  echo "Release type: ${RELEASE_TYPE}"

                  # Get latest release from main
                  LATEST_MAIN_VERSION=$(git describe --tags --match "v*" --abbrev=0 origin/main 2>/dev/null || echo "v0.0.0")
                  LATEST_MAIN_VERSION=${LATEST_MAIN_VERSION#v}

                  # Calculate new base version using go version comparison
                  case "$RELEASE_TYPE" in
                    "major")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      BASE_VERSION="$((MAJOR + 1)).0.0"
                      ;;
                    "minor")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f2)
                      BASE_VERSION="${MAJOR}.$((MINOR + 1)).0"
                      ;;
                    "patch")
                      MAJOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_MAIN_VERSION | cut -d. -f2)
                      PATCH=$(echo $LATEST_MAIN_VERSION | cut -d. -f3)
                      BASE_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                      ;;
                    *)
                      echo "Error: Invalid release type"
                      exit 1
                      ;;
                  esac

                  # Get latest beta for this base version
                  LATEST_BETA=$(git tag -l "v${BASE_VERSION}-beta*" --sort=-v:refname | head -n1)
                  if [[ -z "$LATEST_BETA" ]]; then
                    BETA_VERSION="${BASE_VERSION}-beta.1"
                  else
                    CURRENT_BETA_NUMBER=$(echo "$LATEST_BETA" | sed -E 's/.*beta\.([0-9]+)/\1/')
                    NEXT_BETA_NUMBER=$((CURRENT_BETA_NUMBER + 1))
                    BETA_VERSION="${BASE_VERSION}-beta.${NEXT_BETA_NUMBER}"
                  fi
                  echo "Beta version: ${BETA_VERSION}"

                  # Update go.mod with new version
                  MODULE_PATH=$(grep -m1 "^module" go.mod | awk '{print $2}' | sed "s/v[0-9]*\.[0-9]*\.[0-9]*/v${BETA_VERSION}/")
                  sed -i "s|^module.*|module ${MODULE_PATH}|" go.mod

                  # Generate changelog for PR
                  echo "## Changes in this Beta Release" > PR_CHANGELOG.md
                  echo "" >> PR_CHANGELOG.md

                  # Get all commits in this PR
                  COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges origin/main..HEAD)

                  # Group commits by type
                  echo "### Breaking Changes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep -E "^\\* (feat|fix)!:" >> PR_CHANGELOG.md || true
                  echo "$COMMITS" | grep -B1 "BREAKING CHANGE:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Features" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* feat:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Bug Fixes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* fix:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Performance Improvements" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* perf:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Other Changes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep -vE "^\\* (feat|fix|perf):" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  # Build and test with new version
                  go build -v ./...
                  go test -v ./...

                  # Create and push tag
                  git add go.mod
                  git commit -m "[RELEASE] v${BETA_VERSION}"
                  git tag -a "v${BETA_VERSION}" -m "Release version ${BETA_VERSION}"

                  echo "version=${BETA_VERSION}" >> $GITHUB_OUTPUT

            - name: Push changes
              run: |
                  git push origin HEAD:${GITHUB_HEAD_REF}
                  git push origin "v${{ steps.version.outputs.version }}"

            - name: Comment on PR
              if: steps.version.outputs.version != ''
              uses: actions/github-script@v7
              with:
                  script: |
                    const fs = require('fs');
                    const betaVersion = '${{ steps.version.outputs.version }}';
                    const changelog = fs.readFileSync('PR_CHANGELOG.md', 'utf8');

                    const body = `ðŸš€ Beta Release Published!

                    Version: \`${betaVersion}\`

                    You can use this version in your go.mod:
                    \`\`\`
                    require github.com/shawnkhoffman/nix-foundry v${betaVersion}
                    \`\`\`

                    To test your changes, update your go.mod to use this specific version.

                    ${changelog}`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body: body
                    });
