name: Release Beta
on:
    pull_request:
        types: [opened, edited, reopened, synchronize]

jobs:
    check_release:
        uses: ./.github/workflows/check_release_flag.yml
        with:
            pull_request_number: ${{ github.event.pull_request.number }}

    build:
        needs: check_release
        if: needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  registry-url: "https://npm.pkg.github.com"
                  scope: "@crunchyroll"
            - name: Install dependencies
              run: npm ci
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Run lint
              run: npm run lint
            - name: Build package
              run: npm run build
            - name: Run tests
              run: npm run test

    version_and_publish:
        needs: [check_release, build]
        if: |
            github.event.pull_request.draft == false &&
            needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  registry-url: "https://npm.pkg.github.com"
                  scope: "@crunchyroll"
            - name: Install dependencies
              run: npm ci
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Configure Git
              run: |
                  git config --global user.name "Github Actions"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
            - name: Version and Publish Beta
              id: version
              run: |
                  set -e
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: ${CURRENT_VERSION}"

                  # Get the latest commit message
                  COMMIT_MSG=$(git log -1 --pretty=format:%s)
                  echo "Latest commit: ${COMMIT_MSG}"

                  # Determine release type from commit message
                  if [[ $COMMIT_MSG =~ ^feat!: || $COMMIT_MSG =~ ^fix!: || $COMMIT_MSG =~ "BREAKING CHANGE:" ]]; then
                    RELEASE_TYPE="major"
                  elif [[ $COMMIT_MSG =~ ^feat: ]]; then
                    RELEASE_TYPE="minor"
                  elif [[ $COMMIT_MSG =~ ^(fix|perf|refactor|build|deps|go): ]]; then
                    RELEASE_TYPE="patch"
                  else
                    echo "No release type found in commit message"
                    exit 0
                  fi

                  echo "Release type: ${RELEASE_TYPE}"

                  # Get latest release from main
                  LATEST_MAIN_VERSION=$(git describe --tags --match "v*" --abbrev=0 origin/main 2>/dev/null || echo "v0.0.0")
                  LATEST_MAIN_VERSION=${LATEST_MAIN_VERSION#v}

                  # Calculate new base version
                  case "$RELEASE_TYPE" in
                    "major")
                      BASE_VERSION=$(node -p "require('semver').inc('${LATEST_MAIN_VERSION}', 'major')")
                      ;;
                    "minor")
                      BASE_VERSION=$(node -p "require('semver').inc('${LATEST_MAIN_VERSION}', 'minor')")
                      ;;
                    "patch")
                      BASE_VERSION=$(node -p "require('semver').inc('${LATEST_MAIN_VERSION}', 'patch')")
                      ;;
                    *)
                      echo "Error: Invalid release type"
                      exit 1
                      ;;
                  esac

                  # Get latest beta for this base version
                  LATEST_BETA=$(git tag -l "v${BASE_VERSION}-beta*" --sort=-v:refname | head -n1)
                  if [[ -z "$LATEST_BETA" ]]; then
                    BETA_VERSION="${BASE_VERSION}-beta.1"
                  else
                    CURRENT_BETA_NUMBER=$(echo "$LATEST_BETA" | sed -E 's/.*beta\.([0-9]+)/\1/')
                    NEXT_BETA_NUMBER=$((CURRENT_BETA_NUMBER + 1))
                    BETA_VERSION="${BASE_VERSION}-beta.${NEXT_BETA_NUMBER}"
                  fi
                  echo "Beta version: ${BETA_VERSION}"

                  # Update package.json
                  node -e "const pkg=require('./package.json'); pkg.version='${BETA_VERSION}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n')"

                  # Generate changelog for PR
                  echo "## Changes in this Beta Release" > PR_CHANGELOG.md
                  echo "" >> PR_CHANGELOG.md

                  # Get all commits in this PR
                  COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges origin/main..HEAD)

                  # Group commits by type
                  echo "### Breaking Changes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep -E "^\\* (feat|fix)!:" >> PR_CHANGELOG.md || true
                  echo "$COMMITS" | grep -B1 "BREAKING CHANGE:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Features" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* feat:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Bug Fixes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* fix:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Performance Improvements" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep "^\\* perf:" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "### Other Changes" >> PR_CHANGELOG.md
                  echo "$COMMITS" | grep -vE "^\\* (feat|fix|perf):" >> PR_CHANGELOG.md || true
                  echo "" >> PR_CHANGELOG.md

                  echo "Building package..."
                  npm run build

                  echo "Publishing beta version..."
                  npm publish || {
                    echo "Failed to publish package"
                    exit 1
                  }

                  echo "version=${BETA_VERSION}" >> $GITHUB_OUTPUT
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Comment on PR
              if: steps.version.outputs.version != ''
              uses: actions/github-script@v7
              with:
                  script: |
                    const fs = require('fs');
                    const betaVersion = '${{ steps.version.outputs.version }}';
                    const changelog = fs.readFileSync('PR_CHANGELOG.md', 'utf8');

                    const body = `ðŸš€ Beta Release Published!

                    Version: \`${betaVersion}\`

                    You can install it with:
                    \`\`\`bash
                    npm install @crunchyroll/cr-lib-e2e-ts@${betaVersion}
                    \`\`\`

                    To test your changes, update your package.json to use this specific version.

                    ${changelog}`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body: body
                    });
