name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  beta-release:
    # Only run for PRs when CI passes
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Get PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: '${{ github.event.workflow_run.head_sha }}'
            });
            if (prs.length === 0) {
              throw new Error('No PR found for this commit');
            }
            return prs[0].number;
          result-encoding: string

      - name: Calculate Next Version
        id: version
        run: |
          # Get latest release version (non-beta)
          LATEST_VERSION=$(gh release list --limit 100 | grep -v beta | head -n1 | awk '{print $1}' || echo "v0.0.0")
          LATEST_VERSION=${LATEST_VERSION#v}

          # Split version into parts
          IFS='.' read -r major minor patch <<< "$LATEST_VERSION"

          # Get PR commits
          COMMITS=$(gh pr view ${{ steps.pr.outputs.result }} --json commits --jq '.commits[]')
          COMMIT_MSGS=$(echo "$COMMITS" | jq -r '.messageHeadline + "\n" + (.messageBody // "")')

          # Define valid commit types
          TYPES="feat|fix|docs|style|refactor|perf|test|build|ci|deps|go|revert"

          # Calculate next version based on commit types
          if echo "$COMMIT_MSGS" | grep -qE 'BREAKING CHANGE:' || echo "$COMMIT_MSGS" | grep -qE "^(${TYPES})!(\(.+\))?:"; then
            NEW_VERSION="$((major + 1)).0.0"
          elif echo "$COMMIT_MSGS" | grep -qE '^feat(\(.+\))?:'; then
            NEW_VERSION="${major}.$((minor + 1)).0"
          elif echo "$COMMIT_MSGS" | grep -qE "^(fix|perf)(\(.+\))?:"; then
            NEW_VERSION="${major}.${minor}.$((patch + 1))"
          else
            NEW_VERSION="${major}.${minor}.${patch}"
          fi

          # Get current beta count for this PR
          BETA_COUNT=$(gh release list --limit 100 | grep "beta-.*-pr${{ steps.pr.outputs.result }}\." | wc -l)
          BETA_COUNT=$((BETA_COUNT + 1))

          # Format beta version: beta-X.X.X-prN.M
          BETA_VERSION="beta-${NEW_VERSION}-pr${{ steps.pr.outputs.result }}.${BETA_COUNT}"
          echo "version=$BETA_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o nix-foundry-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o nix-foundry-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o nix-foundry-darwin-arm64

      - name: Create Beta Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          NEXT_VERSION=${{ steps.version.outputs.next_version }}
          gh release create "v$VERSION" \
            --title "Beta Release (v$NEXT_VERSION)" \
            --notes "ðŸš§ Beta release for PR #${{ steps.pr.outputs.result }}\n\nThis will become v$NEXT_VERSION when merged." \
            --prerelease=true \
            nix-foundry-linux-amd64 \
            nix-foundry-darwin-amd64 \
            nix-foundry-darwin-arm64

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}'
            const nextVersion = '${{ steps.version.outputs.next_version }}'
            const downloadUrl = `https://github.com/${{ github.repository }}/releases/download/v${version}/nix-foundry-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m)`

            github.rest.issues.createComment({
              issue_number: ${{ steps.pr.outputs.result }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Beta release for v${nextVersion} is ready for testing:

              **Installation Command:**
              \`\`\`bash
              curl -L ${downloadUrl} -o nix-foundry && chmod +x nix-foundry
              \`\`\`

              [View Release](https://github.com/${{ github.repository }}/releases/tag/v${version})`
            })

  official-release:
    # Only run for pushes to main when CI passes
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Calculate Version
        id: version
        run: |
          # Get PR number from merge commit
          PR_NUMBER=$(git log -1 --pretty=format:%s | grep -oP 'Merge pull request #\K[0-9]+' || echo "")
          if [ -n "$PR_NUMBER" ]; then
            # Get the latest beta version for this PR
            BETA_VERSION=$(gh release list --limit 100 | grep "beta-.*-pr${PR_NUMBER}\." | head -n1 | awk '{print $1}')
            if [ -n "$BETA_VERSION" ]; then
              # Extract version from beta (beta-X.X.X-prN.M -> X.X.X)
              NEW_VERSION=$(echo "$BETA_VERSION" | sed -E 's/^v?beta-([0-9]+\.[0-9]+\.[0-9]+)-pr[0-9]+\.[0-9]+$/\1/')
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "No beta version found - this should not happen" >&2
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o nix-foundry-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o nix-foundry-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o nix-foundry-darwin-arm64

      - name: Create Official Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "$(git log -1 --pretty=format:%b)" \
            --prerelease=false \
            nix-foundry-linux-amd64 \
            nix-foundry-darwin-amd64 \
            nix-foundry-darwin-arm64
