name: Release Management

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [main]

jobs:
  beta-release:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Create Beta Release
        id: create-beta
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: beta-pr-${{ github.event.pull_request.number }}
          release_name: Beta Release for PR #${{ github.event.pull_request.number }}
          draft: false
          prerelease: true
          body: ${{ github.event.pull_request.body }}

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Beta release created: ${{ steps.create-beta.outputs.upload_url }}

              **To test this beta release:**

             You can test this release by running:
              \`\`\`bash
              curl -L https://github.com/${owner}/${repo}/releases/download/v${version}/nix-foundry-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m) -o nix-foundry
              chmod +x nix-foundry
              ./nix-foundry --version
              \`\`\`

              Report any issues in this PR thread.`
            })

  production-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: beta-release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Production Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Production Release ${{ github.sha }}
          draft: false
          prerelease: false
