name: Release

on:
    push:
        branches: [main]
    pull_request:
        types: [closed]

permissions:
    contents: write
    pull-requests: write

jobs:
    test:
        uses: ./.github/workflows/ci.yml

    check_release:
        if: github.event_name == 'pull_request'
        uses: ./.github/workflows/check_release_flag.yml
        with:
            pull_request_number: ${{ github.event.pull_request.number }}

    build:
        needs: [test]
        if: |
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') ||
            (github.event_name == 'push' && github.ref == 'refs/heads/main')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true
            - name: Build
              run: go build -v ./...

    version_and_publish:
        needs: [test, check_release, build]
        if: |
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') ||
            (github.event_name == 'push' && github.ref == 'refs/heads/main')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
                  cache: true
            - name: Configure Git
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global --add safe.directory "*"
            - name: Version and Tag
              id: version
              run: |
                  set -e
                  # Get current version from go.mod
                  CURRENT_VERSION=$(grep -m1 "^module" go.mod | awk '{print $2}' | awk -F/ '{print $NF}' | sed 's/v//')
                  echo "Current version: ${CURRENT_VERSION}"

                  # Get commits since last tag
                  LAST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")
                  echo "Last tag: ${LAST_TAG}"

                  # Get all commits since last tag
                  COMMITS=$(git log --no-merges --format=%B ${LAST_TAG}..HEAD)
                  echo "Commits since last tag:"
                  echo "$COMMITS"

                  # Determine release type from commits
                  RELEASE_TYPE=""
                  while IFS= read -r COMMIT_MSG; do
                    if [[ -z "$COMMIT_MSG" ]]; then
                      continue
                    fi

                    if [[ "$COMMIT_MSG" =~ ^feat!: || "$COMMIT_MSG" =~ ^fix!: || "$COMMIT_MSG" =~ "BREAKING CHANGE:" ]]; then
                      RELEASE_TYPE="major"
                      break
                    elif [[ -z "$RELEASE_TYPE" && "$COMMIT_MSG" =~ ^feat: ]]; then
                      RELEASE_TYPE="minor"
                    elif [[ -z "$RELEASE_TYPE" && "$COMMIT_MSG" =~ ^(fix|perf|refactor|build|deps|go): ]]; then
                      RELEASE_TYPE="patch"
                    fi
                  done <<< "$COMMITS"

                  if [[ -z "$RELEASE_TYPE" ]]; then
                    echo "No release type found in commits"
                    exit 0
                  fi

                  echo "Release type: ${RELEASE_TYPE}"

                  # Calculate new version using go version comparison
                  LATEST_VERSION=${LAST_TAG#v}
                  echo "Latest version: ${LATEST_VERSION}"

                  case "$RELEASE_TYPE" in
                    "major")
                      MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
                      NEW_VERSION="$((MAJOR + 1)).0.0"
                      ;;
                    "minor")
                      MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
                      NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
                      ;;
                    "patch")
                      MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
                      MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
                      PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
                      NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                      ;;
                    *)
                      echo "Error: Invalid release type"
                      exit 1
                      ;;
                  esac

                  echo "New version: ${NEW_VERSION}"

                  # Update go.mod with new version
                  MODULE_PATH=$(grep -m1 "^module" go.mod | awk '{print $2}' | sed "s/v[0-9]*\.[0-9]*\.[0-9]*/v${NEW_VERSION}/")
                  sed -i "s|^module.*|module ${MODULE_PATH}|" go.mod

                  # Generate changelog
                  {
                    echo "## [${NEW_VERSION}] - $(date +%Y-%m-%d)"
                    echo

                    # Group commits by type
                    BREAKING_CHANGES=$(echo "$COMMITS" | grep -E "^feat!:|^fix!:|BREAKING CHANGE:" || true)
                    if [ ! -z "$BREAKING_CHANGES" ]; then
                      echo "### Breaking Changes"
                      echo "$BREAKING_CHANGES"
                      echo
                    fi

                    FEATURES=$(echo "$COMMITS" | grep "^feat:" || true)
                    if [ ! -z "$FEATURES" ]; then
                      echo "### Features"
                      echo "$FEATURES"
                      echo
                    fi

                    FIXES=$(echo "$COMMITS" | grep "^fix:" || true)
                    if [ ! -z "$FIXES" ]; then
                      echo "### Bug Fixes"
                      echo "$FIXES"
                      echo
                    fi

                    PERF=$(echo "$COMMITS" | grep "^perf:" || true)
                    if [ ! -z "$PERF" ]; then
                      echo "### Performance Improvements"
                      echo "$PERF"
                      echo
                    fi

                    OTHER=$(echo "$COMMITS" | grep -vE "^(feat!:|fix!:|feat:|fix:|perf:|BREAKING CHANGE:)" || true)
                    if [ ! -z "$OTHER" ]; then
                      echo "### Other Changes"
                      echo "$OTHER"
                      echo
                    fi
                  } > CHANGELOG.new.md

                  # Prepend new changelog to existing one
                  if [ -f CHANGELOG.md ]; then
                    tail -n +2 CHANGELOG.md > CHANGELOG.tmp
                    cat CHANGELOG.new.md CHANGELOG.tmp > CHANGELOG.md
                    rm CHANGELOG.tmp
                  else
                    cat CHANGELOG.new.md > CHANGELOG.md
                  fi
                  rm CHANGELOG.new.md

                  # Build and test with new version
                  go build -v ./...
                  go test -v ./...

                  # Commit changes
                  git add go.mod CHANGELOG.md
                  git status
                  git commit -m "[RELEASE] v${NEW_VERSION}"
                  git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"

                  # Set outputs for use in subsequent steps
                  echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

            - name: Push changes
              if: steps.version.outputs.new_version != ''
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
                  # Only push the tag, since changes are already on main through PR merge
                  git push origin "v${{ steps.version.outputs.new_version }}"

            - name: Build Release Binaries
              if: steps.version.outputs.new_version != ''
              run: |
                  VERSION="${{ steps.version.outputs.new_version }}"
                  mkdir -p dist

                  # Build for macOS (Intel)
                  GOOS=darwin GOARCH=amd64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_darwin_amd64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for macOS (Apple Silicon)
                  GOOS=darwin GOARCH=arm64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_darwin_arm64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for Linux (x86_64)
                  GOOS=linux GOARCH=amd64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_linux_amd64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

                  # Build for Linux (ARM64)
                  GOOS=linux GOARCH=arm64 go build -o dist/nix-foundry
                  tar czf "dist/nix-foundry_${VERSION}_linux_arm64.tar.gz" -C dist nix-foundry
                  rm dist/nix-foundry

            - name: Create GitHub Release
              if: steps.version.outputs.new_version != ''
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  VERSION="${{ steps.version.outputs.new_version }}"

                  # Read the latest entry from CHANGELOG.md for release notes
                  CHANGELOG=$(awk '/^## \[.*\]/{p=NR+1}(NR<=p){print}' CHANGELOG.md)

                  # Create release with changelog
                  gh release create "v${VERSION}" \
                    --title "v${VERSION}" \
                    --notes "${CHANGELOG}" \
                    dist/nix-foundry_${VERSION}_*.tar.gz
