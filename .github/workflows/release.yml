name: Release

on:
    pull_request:
        types: [closed]

jobs:
    test:
        uses: ./.github/workflows/ci.yml

    check_release:
        uses: ./.github/workflows/check_release_flag.yml
        with:
            pull_request_number: ${{ github.event.pull_request.number }}

    build:
        needs: [test, check_release]
        if: |
            github.event.pull_request.merged == true &&
            github.event.pull_request.base.ref == 'main' &&
            needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  registry-url: "https://npm.pkg.github.com"
                  scope: "@crunchyroll"
            - name: Install dependencies
              run: npm ci
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Run lint
              run: npm run lint
            - name: Build package
              run: npm run build
            - name: Run tests
              run: npm run test

    version_and_publish:
        needs: [test, check_release, build]
        if: |
            github.event.pull_request.merged == true &&
            !contains(github.event.pull_request.title, '[RELEASE]') &&
            needs.check_release.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: main
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  registry-url: "https://npm.pkg.github.com"
                  scope: "@crunchyroll"
            - name: Install dependencies
              run: npm ci
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Configure Git
              run: |
                  git config --global user.name "Github Actions"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
            - name: Version and Tag
              id: version
              run: |
                  set -e
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: ${CURRENT_VERSION}"

                  case "${{ needs.check_release.outputs.release_type }}" in
                    "major")
                      NEW_VERSION=$(node -p "require('semver').inc('${CURRENT_VERSION}', 'major')")
                      ;;
                    "minor")
                      NEW_VERSION=$(node -p "require('semver').inc('${CURRENT_VERSION}', 'minor')")
                      ;;
                    "patch")
                      NEW_VERSION=$(node -p "require('semver').inc('${CURRENT_VERSION}', 'patch')")
                      ;;
                    *)
                      echo "Error: Invalid release type"
                      exit 1
                      ;;
                  esac

                  echo "New version: ${NEW_VERSION}"

                  # Update package.json
                  node -e "const pkg=require('./package.json'); pkg.version='${NEW_VERSION}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n')"

                  # Generate changelog
                  echo "## [${NEW_VERSION}] - $(date +%Y-%m-%d)" >> CHANGELOG.new.md
                  echo "" >> CHANGELOG.new.md

                  # Get all commits since last tag
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                  if [ -n "$LAST_TAG" ]; then
                    COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
                  else
                    COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges)
                  fi

                  # Group commits by type
                  echo "### Breaking Changes" >> CHANGELOG.new.md
                  echo "$COMMITS" | grep -E "^\\* (feat|fix)!:" >> CHANGELOG.new.md || true
                  echo "$COMMITS" | grep -B1 "BREAKING CHANGE:" >> CHANGELOG.new.md || true
                  echo "" >> CHANGELOG.new.md

                  echo "### Features" >> CHANGELOG.new.md
                  echo "$COMMITS" | grep "^\\* feat:" >> CHANGELOG.new.md || true
                  echo "" >> CHANGELOG.new.md

                  echo "### Bug Fixes" >> CHANGELOG.new.md
                  echo "$COMMITS" | grep "^\\* fix:" >> CHANGELOG.new.md || true
                  echo "" >> CHANGELOG.new.md

                  echo "### Performance Improvements" >> CHANGELOG.new.md
                  echo "$COMMITS" | grep "^\\* perf:" >> CHANGELOG.new.md || true
                  echo "" >> CHANGELOG.new.md

                  echo "### Other Changes" >> CHANGELOG.new.md
                  echo "$COMMITS" | grep -vE "^\\* (feat|fix|perf):" >> CHANGELOG.new.md || true
                  echo "" >> CHANGELOG.new.md

                  # Prepend new changelog to existing one
                  if [ -f CHANGELOG.md ]; then
                    tail -n +2 CHANGELOG.md > CHANGELOG.tmp
                    cat CHANGELOG.new.md CHANGELOG.tmp > CHANGELOG.md
                    rm CHANGELOG.tmp
                  else
                    cat CHANGELOG.new.md > CHANGELOG.md
                  fi
                  rm CHANGELOG.new.md

                  # Update docs
                  npm run docs

                  # Commit changes
                  git add package.json CHANGELOG.md docs/
                  git commit -m "[RELEASE] v${NEW_VERSION}"
                  git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"

                  # Push changes
                  git push origin main --tags || {
                    echo "Failed to push changes"
                    exit 1
                  }

                  echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

            - name: Build Package
              run: |
                echo "Building package version ${{ steps.version.outputs.version }}..."
                npm run build

            - name: Publish to npm
              run: |
                echo "Publishing version ${{ steps.version.outputs.version }}..."
                npm publish || {
                  echo "Failed to publish package"
                  exit 1
                }
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create GitHub Release
              uses: actions/github-script@v7
              with:
                  script: |
                    const fs = require('fs');
                    const version = 'v${{ steps.version.outputs.version }}';

                    // Read the latest entry from CHANGELOG.md
                    const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
                    const latestEntry = changelog.split(/^## /m)[1].trim();

                    await github.rest.repos.createRelease({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      tag_name: version,
                      name: version,
                      body: latestEntry,
                      draft: false,
                      prerelease: false
                    });
