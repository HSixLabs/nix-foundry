name: Check Release Flag
on:
  workflow_call:
    inputs:
      pull_request_number:
        required: true
        type: number
    outputs:
      should_publish:
        description: "Whether a release should be published"
        value: ${{ jobs.check_flag.outputs.should_publish }}
      release_type:
        description: "Type of release (major/minor/patch)"
        value: ${{ jobs.check_flag.outputs.release_type }}
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  check_flag:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    outputs:
      should_publish: ${{ steps.check-version.outputs.should_publish }}
      release_type: ${{ steps.check-version.outputs.release_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Release Flag
        id: check-version
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.PR_NUMBER || context.payload.pull_request.number
            });

            // Get the latest commit message
            const execSync = require('child_process').execSync;
            const latestCommit = execSync('git log -1 --pretty=format:%s').toString().toLowerCase();
            console.log('Latest commit:', latestCommit);

            // Valid scopes from commitlint config
            const validScopes = ['api', 'deps', 'mod'];
            const scopePattern = new RegExp(`^(feat|fix)\\((${validScopes.join('|')})\\)!?:`);

            let releaseType = '';

            // Check for breaking changes
            if (
              latestCommit.match(/^(feat|fix)!:/) ||
              latestCommit.match(new RegExp(`^(feat|fix)\\((${validScopes.join('|')})\\)!:`)) ||
              latestCommit.includes('breaking change:')
            ) {
              releaseType = 'major';
            }
            // Check for features
            else if (
              latestCommit.startsWith('feat:') ||
              latestCommit.match(/^feat\([^)]+\):/)
            ) {
              releaseType = 'minor';
            }
            // Check for patches
            else if (
              latestCommit.startsWith('fix:') ||
              latestCommit.match(/^fix\([^)]+\):/) ||
              latestCommit.startsWith('perf:') ||
              latestCommit.match(/^perf\([^)]+\):/) ||
              latestCommit.startsWith('refactor:') ||
              latestCommit.match(/^refactor\([^)]+\):/) ||
              latestCommit.startsWith('build:') ||
              latestCommit.match(/^build\([^)]+\):/) ||
              latestCommit.startsWith('deps:') ||
              latestCommit.match(/^deps\([^)]+\):/) ||
              latestCommit.startsWith('go:') ||
              latestCommit.match(/^go\([^)]+\):/)
            ) {
              releaseType = 'patch';
            }

            const shouldPublish = releaseType ? 'true' : 'false';
            core.setOutput('should_publish', shouldPublish);
            core.setOutput('release_type', releaseType);

            console.log('Release type:', releaseType);
            return { shouldPublish, releaseType };

      - name: Comment on PR if no release flag
        if: steps.check-version.outputs.should_publish != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `No release flag detected in the latest commit. To trigger a release, use conventional commit format:

            Major version (Breaking changes):
            - \`feat!: change configuration file format\`
            - \`feat(api)!: change API response format\`
            - \`fix!: remove deprecated function\`
            - Include \`BREAKING CHANGE:\` in the commit message

            Minor version (Features):
            - \`feat: add new command\`
            - \`feat(api): add new endpoint\`

            Patch version:
            - \`fix: resolve config parsing issue\`
            - \`fix(api): fix endpoint response\`
            - \`perf: improve build speed\`
            - \`refactor: restructure command handling\`
            - \`build: update build system\`
            - \`deps: update dependencies\`
            - \`go: update Go version\`
            - \`go(mod): update module dependencies\`

            No version bump:
            - \`style: format code\`
            - \`test: add new tests\`
            - \`ci: update workflows\`
            - \`docs: update readme\`

            Valid scopes: api, deps, mod

            Note: All commit messages must follow the conventional commit format and use approved scopes.`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER || context.issue.number,
              per_page: 1,
              page: 1
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('No release flag detected')
            );

            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER || context.issue.number,
                body: body
              });
            }
        env:
          PR_NUMBER: ${{ inputs.pull_request_number }}
