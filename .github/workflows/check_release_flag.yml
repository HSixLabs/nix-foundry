name: Check Release Flag

on:
  workflow_call:
    inputs:
      pull_request_number:
        required: true
        type: number
    outputs:
      should_publish:
        description: "Whether the changes warrant a release"
        value: ${{ jobs.check_flag.outputs.should_publish }}
      release_type:
        description: "Type of release (major, minor, patch)"
        value: ${{ jobs.check_flag.outputs.release_type }}
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  check_flag:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check_flag.outputs.should_publish }}
      release_type: ${{ steps.check_flag.outputs.release_type }}
    steps:
      - uses: actions/checkout@v4
      - name: Check Release Flag
        id: check_flag
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request ?
              context.payload.pull_request.number :
              inputs.pull_request_number;

            console.log(`Checking PR #${prNumber}`);

            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Get all commits in the PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            let releaseType = '';

            // Check all commit messages in the PR
            for (const commit of commits.data) {
              const commitMessage = commit.commit.message;
              console.log('Checking commit:', commitMessage);

              if (commitMessage.startsWith('feat!:') ||
                  commitMessage.startsWith('fix!:') ||
                  commitMessage.includes('BREAKING CHANGE:')) {
                releaseType = 'major';
                break; // Highest priority, exit early
              }
              else if (commitMessage.startsWith('feat:') && releaseType !== 'major') {
                releaseType = 'minor';
              }
              else if ((commitMessage.startsWith('fix:') ||
                       commitMessage.startsWith('perf:') ||
                       commitMessage.startsWith('refactor:') ||
                       commitMessage.startsWith('build:') ||
                       commitMessage.startsWith('deps:') ||
                       commitMessage.startsWith('go:')) &&
                       !['major', 'minor'].includes(releaseType)) {
                releaseType = 'patch';
              }
            }

            const shouldPublish = releaseType ? 'true' : 'false';
            core.setOutput('should_publish', shouldPublish);
            core.setOutput('release_type', releaseType);
